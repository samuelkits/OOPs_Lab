from abc import ABC, abstractmethod

class Employee(ABC):
    def __init__(self, emp_name, designation, salary):
        self.emp_name = emp_name
        self.designation = designation
        self.salary = salary

    @abstractmethod
    def calcRaise(self):
        pass

    def display(self):
        print(f"Employee Name: {self.emp_name}")
        print(f"Designation: {self.designation}")
        print(f"Salary: {self.salary}")

class Manager(Employee):
    def __init__(self, emp_name, designation, salary, bonus):
        super().__init__(emp_name, designation, salary)
        self.bonus = bonus

    def calcRaise(self):
        self.salary += self.salary * 0.05 + self.bonus

class Developer(Employee):
    def __init__(self, emp_name, designation, salary, no_pgms):
        super().__init__(emp_name, designation, salary)
        self.no_pgms = no_pgms

    def calcRaise(self):
        self.salary += self.salary * 0.05 + self.no_pgms * 25

class Main:
    def perform_operations(self):
        manager = Manager("Alice", "Manager", 80000, 5000)
        developer = Developer("Bob", "Developer", 60000, 10)

        print("Before Raise:")
        manager.display()
        developer.display()

        manager.calcRaise()
        developer.calcRaise()

        print("\nAfter Raise:")
        manager.display()
        developer.display()

if __name__ == "__main__":
    main = Main()
    main.perform_operations()
