import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;

// Airport class with a semaphore to manage runway availability
class Airport {
    private final Semaphore runways;

    public Airport(int numberOfRunways) {
        runways = new Semaphore(numberOfRunways);
    }

    public void requestRunway(String airplane) throws InterruptedException {
        System.out.println(airplane + " is requesting a runway...");
        runways.acquire();
        System.out.println(airplane + " has been granted a runway.");
    }

    public void releaseRunway(String airplane) {
        System.out.println(airplane + " has released a runway.");
        runways.release();
    }
}

// Airplane class implementing Runnable for multithreading
class Airplane implements Runnable {
    private final String name;
    private final Airport airport;

    public Airplane(String name, Airport airport) {
        this.name = name;
        this.airport = airport;
    }

    @Override
    public void run() {
        try {
            airport.requestRunway(name);
            System.out.println(name + " is taking off/landing...");
            Thread.sleep(2000); // Simulate time taken for takeoff/landing
            airport.releaseRunway(name);
        } catch (InterruptedException e) {
            System.out.println(name + " was interrupted.");
        }
    }
}

public class AirportSimulation {
    public static void main(String[] args) {
        int numberOfRunways = 3;
        Airport airport = new Airport(numberOfRunways);

        ExecutorService executor = Executors.newFixedThreadPool(5);

        for (int i = 1; i <= 5; i++) {
            Airplane airplane = new Airplane("Airplane " + i, airport);
            executor.submit(airplane);
        }

        executor.shutdown();
    }
}
