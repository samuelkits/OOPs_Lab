import java.util.Arrays;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class MultithreadedBubbleSort {

    // Bubble sort implementation
    public static void bubbleSort(int[] array) {
        int n = array.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (array[j] > array[j + 1]) {
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
    }

    // Merge sorted sub-arrays
    public static int[] mergeSortedArrays(int[][] arrays) {
        int totalLength = Arrays.stream(arrays).mapToInt(arr -> arr.length).sum();
        int[] result = new int[totalLength];
        int[] indices = new int[arrays.length];

        for (int i = 0; i < totalLength; i++) {
            int minIndex = -1;
            int minValue = Integer.MAX_VALUE;

            for (int j = 0; j < arrays.length; j++) {
                if (indices[j] < arrays[j].length && arrays[j][indices[j]] < minValue) {
                    minValue = arrays[j][indices[j]];
                    minIndex = j;
                }
            }

            result[i] = minValue;
            indices[minIndex]++;
        }

        return result;
    }

    public static void main(String[] args) throws InterruptedException {
        int n = 4; // Number of threads
        int[] array = {83, 86, 77, 15, 93, 35, 86, 92, 49, 21, 62, 27, 90, 59, 63, 26, 40, 26, 72, 36};

        int subArraySize = (int) Math.ceil((double) array.length / n);
        int[][] subArrays = new int[n][];

        for (int i = 0; i < n; i++) {
            int start = i * subArraySize;
            int end = Math.min(start + subArraySize, array.length);
            subArrays[i] = Arrays.copyOfRange(array, start, end);
        }

        ExecutorService executor = Executors.newFixedThreadPool(n);

        for (int i = 0; i < n; i++) {
            final int index = i;
            executor.submit(() -> bubbleSort(subArrays[index]));
        }

        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.HOURS);

        int[] sortedArray = mergeSortedArrays(subArrays);

        System.out.println("Sorted array: " + Arrays.toString(sortedArray));
    }
}
